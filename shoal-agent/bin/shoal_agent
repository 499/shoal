#!/bin/bash
# Basic support for IRIX style chkconfig
###
# chkconfig: 235 98 55
# description: Manages shoal agent with chkconfig.
###

SERVICE=shoal_agent
SHOAL_PATH=${SHOAL_PATH-'/usr/local/shoal-agent'}
LOG=/var/log/${SERVICE}.log
PIDFILE=/var/run/$SERVICE.pid
PROG=$SHOAL_PATH/$SERVICE.py
COMMAND=$1
shift

# Sanity checks.
test -d "$SHOAL_PATH" || {
    echo >&2 "No such directory: $SHOAL_PATH"
    echo >&2 "You might need to set the SHOAL_PATH variable in $0"
    exit 2
}

test -f "$PROG" || {
    echo >&2 "No such file: $PROG"
    echo >&2 "You might need to set the SHOAL_PATH variable in $0"
    exit 3
}

for i in "$PIDFILE" "$LOG"; do
    # If the file doesn't exist, check that we have write access to its parent
    # directory to be able to create it.
    test -e "$i" || i=`dirname "$i"`
    test -w "$i" || {
        echo >&2 "$0: error: Cannot write to $i"
        exit 4
    }
done

start () {
    if [ -f $PIDFILE ]; then
        PID=`cat $PIDFILE`
        ps $PID >/dev/null
        IS_RUNNING=$?
        if [ $IS_RUNNING ]; then
            PID=`cat $PIDFILE`
            echo $"$SERVICE is already running with PID ${PID}."
            return 1
        else
            echo $"$SERVICE didn't shut down cleanly last time."
            rm -f $PIDFILE
        fi
    fi
    echo "Starting $PROG"
    $PROG >> $LOG 2>&1 &
    echo $! > $PIDFILE
}

# stop [signum]
stop () {
    if [ -f $PIDFILE ]; then
        echo -n $"Stopping $SERVICE:"
        PID=`cat $PIDFILE`
        /bin/kill $PID
        while ps -p $PID >/dev/null; do sleep 1; done
        if [ $? -eq 0 ]; then
            rm -f $PIDFILE >/dev/null 2>&1
        fi
    fi
}

status () {
        if [ -f $PIDFILE ]; then
            PID=`cat $PIDFILE`
            ps $PID >/dev/null
            IS_RUNNING=$?

            if [ $IS_RUNNING ]; then
                PID=`cat $PIDFILE`
                echo $"$SERVICE is running with PID ${PID}."
            else
                echo $"$SERVICE has exited unexpectedly."
            fi
        else
            echo "$SERVICE isn't running."
        fi
}

forcekill () {
    if [ -f $PIDFILE ]; then
        echo -n $"Killing $SERVICE:"
        /bin/kill -9 `cat $PIDFILE`
        if [ $? -eq 0 ]; then
            rm -f $PIDFILE >/dev/null 2>&1
        fi
    fi
}

case $COMMAND in
    start) start
        ;;
    force-restart)
        forcekill
        start
        ;;
    restart)
        stop
        start
        ;;
    stop) stop
        ;;
    status) status
            exit $?
        ;;
    *)  echo >&2 "usage: $0 <start|stop|restart|status|force-restart>"
        exit 1
        ;;
esac

